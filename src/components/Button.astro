---
/**
 * Props for the reusable Button component.
 */
interface Props {
  /**
   * Visual style of the button.
   * - `primary` → filled default button
   * - `secondary` → outlined/secondary button
   * - `text` → text-only button
   */
  variant?: "primary" | "secondary" | "text";

  /**
   * Size of the button.
   * - `small` → compact size
   * - `large` → larger padding
   * - `default` → base size
   */
  size?: "small" | "large" | "default";

  /**
   * Add an id to a button
   * Be sure to wrap the id inside the {} in ""
   *
   * Example:
   * ```astro
   * id={"btn-id"}
   * ```
   */
  id?: string;

  /**
   * Allows you to add an attribute to the button
   * Be sure to wrap the value in quotes
   */
  [key: string]: any;

  /**
   * Apply breadcrumb styling (smaller text, tighter spacing).
   * No need to pass true. This is a simple on/off flag (true/false).
   * Requires `variant="text"` and `icon` for breadcrumb styles to apply.
   *
   * Example:
   * ```astro
   *  <Button variant="text" icon breadcrumb>
   * ```
   */
  breadcrumb?: boolean;

  /**
   * Turns the button into a link (`<a>`).
   *
   * Example:
   * ```astro
   *  <Button href="/about">About</Button>
   * ```
   */
  href?: string;

  /**
   * Opens the link in a new tab.
   * Works only when `href` is set.
   */
  newTab?: boolean;

  /**
   * Disable the button (`<button disabled>`).
   */
  disabled?: boolean;

  /**
   * Use icon layout.
   *
   * Typically applied if you pass `slot="icon-left"` or `slot="icon-right"`.
   *
   * This is a simple on/off flag (true/false). No need to pass `true` explicitly:
   *
   * ```astro
   * <Button icon>
   *   <svg slot="icon-left" aria-hidden="true"><path /></svg>
   *   All Candidates
   * </Button>
   * ```
   *
   * Can create a text-only button with an icon by passing `variant="text"` along with `icon`:
   *
   * ```astro
   * <Button variant="text" icon>
   *   <svg slot="icon-left" aria-hidden="true"><path /></svg>
   *   All Candidates
   * </Button>
   * ```
   */
  icon?: boolean;

  /**
   * Extra classes to append (e.g., `w-full`).
   */
  class?: string;

  /**
   * Native button type.
   * - `button` (default)
   * - `submit`
   * - `reset`
   */
  type?: "button" | "submit" | "reset";
}

const {
  variant = "primary",
  size = "default",
  breadcrumb = false,
  href,
  newTab = false,
  disabled = false,
  icon = false,
  class: extra = "",
  type = "button",
  id,
  ...rest
} = Astro.props;

/* Build class list from your CSS combo-classes. Using && operator as shorthand for an if else statement: let className;
if (variant === "secondary") {
  className = "is-secondary";
} else {
  className = false;
}

Rule:
	•	If the left-hand side is truthy, && returns the right-hand side.
	•	If the left-hand side is falsy, && returns the left-hand side.
*/
const classes = [
  "button", // always add base .button
  variant === "secondary" && "is-secondary",
  variant === "text" && "is-text",
  size === "small" && "is-small",
  size === "large" && "is-large",
  icon && "is-icon", //boolean no need to set equal to a string. adds is-icon combo class when icon is added to button
  breadcrumb && "is-breadcrumb", //boolean no need to set equal to a string. adds is-breadcrumb combo class when icon is added to button
  extra, // allow passing any extra utility classes
]
  .filter(Boolean) // filters out false items
  .join(" "); // joins any remaining items into a string of classes with a space inbetween each

// Security defaults for external links
const rel = newTab ? "noopener noreferrer" : undefined;
const target = newTab ? "_blank" : undefined;
---

{
  href ? (
    <a href={href} class={classes} target={target} rel={rel} id={id} {...rest}>
      <slot name="icon-left" />
      <slot />
      <slot name="icon-right" />
    </a>
  ) : (
    <button class={classes} type={type} disabled={disabled} id={id} {...rest}>
      <slot name="icon-left" />
      <slot />
      <slot name="icon-right" />
    </button>
  )
}
<style>
  /* =======================================================
BUTTONS
========================================================== */
  :root {
    /*============ Primary Button Styles ===============*/

    /* Primary default button border color */
    --button-border: transparent;

    /* Primary default button background color */
    --button-background: var(--theme-gradient-dark);

    /* Primary default button text color */
    --button-text: var(--theme-text-light);

    /* Primary button border color on hover */
    --button-border-hover: var(--color-neutral-white);

    /* Primary button background color on hover */
    --button-background-hover: transparent;

    /* Primary button text color on hover */
    --button-text-hover: var(--theme-text-light);

    /*============ Secondary Button Styles ===============*/

    /* Secondary button border color */
    --button-secondary-border: var(--border-color-light);

    /* Secondary button background color */
    --button-secondary-background: transparent;

    /* Secondary button text color */
    --button-secondary-text: var(--theme-text-dark);

    /* Secondary button border color on hover */
    --button-secondary-border-hover: var(--color-neutral-white);

    /* Secondary button background color on hover */
    --button-secondary-background-hover: var(--color-neutral-white);

    /* Secondary button text color on hover */
    --button-secondary-text-hover: var(--theme-text-alternate);

    /*============ Text Button Styles  ===============*/

    /* Text button text color */
    --button-text-text: var(--theme-text-light);

    /* Text button text color on hover */
    --button-text-text-hover: var(--color-neutral-white);
  }

  /* ========================================================
   BUTTON STYLES
   ======================================================== */

  /* Primary Button */

  .button {
    /* Display */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    white-space: normal;
    position: relative;

    /* Padding */
    padding: 0.75rem 1.5rem;

    /* border radius */
    border-radius: var(--radius-main);

    /* Border Size & Color */
    border: var(--border-width-main) solid var(--button-border);

    /* Background */
    background: var(--button-background);
    background-clip: padding-box; /* ⟵ key: clip gradient to inside of border / padding box */
    -webkit-mask-image: -webkit-radial-gradient(
      white,
      black
    ); /* Safari Fix for gradients */

    /* font properties */
    font-family: var(--font-primary);
    font-size: var(--text-regular-size);
    font-weight: var(--text-regular-weight);
    color: var(--button-text);
    text-align: center;

    /* Transitions for animations */
    transition:
      border 300ms ease,
      color 300ms ease,
      opacity 300ms ease,
      background-color 300ms ease;
    /* Positioning */
  }

  /* Primary Button Hover */

  .button:hover {
    border-color: var(--button-border-hover);
    background-color: var(--button-background-hover);
    color: var(--button-text-hover);
    opacity: 0.8;
  }

  /* Primary Button Sizes */

  .button.is-small {
    padding: 0.55rem 1.25rem;
  }

  .button.is-large {
    padding: 1rem 2rem;
  }

  /* Secondary Button */

  .button.is-secondary {
    border: var(--border-width-main) solid var(--button-secondary-border);
    background-color: var(--button-secondary-background);
    font-family: var(--font-primary);
    color: var(--button-secondary-text);
    padding: 0.75rem 1.5rem;
  }

  /* Secondary Button Hover */

  .button.is-secondary:hover {
    border-color: var(--button-secondary-border-hover);
    background-color: var(--button-secondary-background-hover);
    color: var(--button-secondary-text-hover);
  }

  /* Secondary Button Sizes */

  .button.is-secondary.is-small {
    padding: 0.55rem 1.25rem;
  }

  .button.is-secondary.is-large {
    padding: 1rem 2rem;
  }

  /* Button with Icon */

  .button.is-icon {
    gap: 0.5rem;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    text-decoration: none;
    display: flex;
    position: relative;
  }

  /* Text Only Button */

  .button.is-text {
    color: var(--button-text-text);
    background-color: transparent;
    border: 2px solid transparent;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    padding-left: 0;
  }

  /* Text Only Button Hover */

  .button.is-text:hover {
    color: var(--button-text-text-hover);
  }

  /* Text Only Button with Icon */

  .button.is-icon.is-text {
    color: var(--button-text-text);
    transition:
      opacity 300ms ease,
      color 300ms ease;
  }

  /* Text Only Button with Icon Hover */
  .button.is-icon.is-text:hover {
    color: var(--button-text-text-hover);
    opacity: 0.75;
  }

  /* Breadcrumb Button */

  .button.is-icon.is-text.is-breadcrumb {
    grid-column-gap: 0.25rem;
    grid-row-gap: 0.25rem;
    padding-top: 0;
    padding-bottom: 0;
    font-weight: 400;
  }
</style>
